package model;import java.io.IOException;/** * Created by Your Majesty on 03.09.2015. */public class SizeAndPositionShips {    boolean check = false;    boolean asix = false;    // Однопалубный    void shipsPositionOne(int[][] list) throws IOException {        for (int i = 0; i < 1; ) {            int positionX = 1 + (int) (Math.random() * (11 - 1));            int positionY = 1 + (int) (Math.random() * (11 - 1));            check = checkCells(list, positionX, positionY, check);            if (check == true) {                list[positionX][positionY] = 1;                i++;            }        }    }    // Двухпалубный    void shipsPositionTwo(int[][] list) throws IOException {        for (int i = 0; i < 1; ) {            int positionX = 1 + (int) (Math.random() * (11 - 1));            int positionY = 1 + (int) (Math.random() * (11 - 1));            asix = asixSelection(asix);            if (asix == true) {                int positionY1 = positionY;                if (positionY == 10) {                    check = checkCells(list, positionX, positionY, check);                    if (check == true) {                        positionY = positionY - 1;                        check = checkCells(list, positionX, positionY, check);                        if (check == true) {                            list[positionX][positionY1] = 1;                            list[positionX][positionY] = 1;                            i++;                        }                    }                } else {                    check = checkCells(list, positionX, positionY, check);                    if (check == true) {                        positionY = positionY + 1;                        check = checkCells(list, positionX, positionY, check);                        if (check == true) {                            list[positionX][positionY1] = 1;                            list[positionX][positionY] = 1;                            i++;                        }                    }                }            } else {                int positionX1 = positionX;                if (positionX == 10) {                    check = checkCells(list, positionX, positionY, check);                    if (check == true) {                        positionX = positionX - 1;                        check = checkCells(list, positionX, positionY, check);                        if (check == true) {                            list[positionX1][positionY] = 1;                            list[positionX][positionY] = 1;                            i++;                        }                    }                } else {                    check = checkCells(list, positionX, positionY, check);                    if (check == true) {                        positionX = positionX + 1;                        check = checkCells(list, positionX, positionY, check);                        if (check == true) {                            list[positionX1][positionY] = 1;                            list[positionX][positionY] = 1;                            i++;                        }                    }                }            }        }    }    // Трехпалубный    void shipsPositionThree(int[][] list) throws IOException {        for (int i = 0; i < 1; ) {            int positionX = 1 + (int) (Math.random() * (11 - 1));            int positionY = 1 + (int) (Math.random() * (11 - 1));            asix = asixSelection(asix);            if (asix == true) {                int positionY0 = positionY;                int positionY1;                int positionY2;                if (positionY == 10 || positionY == 9) {                    check = checkCells(list, positionX, positionY, check);                    if (check == true) {                        positionY1 = positionY - 1;                        check = checkCells(list, positionX, positionY1, check);                        if (check == true) {                            positionY2 = positionY - 2;                            check = checkCells(list, positionX, positionY2, check);                            if (check == true) {                                list[positionX][positionY0] = 1;                                list[positionX][positionY1] = 1;                                list[positionX][positionY2] = 1;                                i++;                            }                        }                    }                } else {                    check = checkCells(list, positionX, positionY, check);                    if (check == true) {                        positionY1 = positionY + 1;                        check = checkCells(list, positionX, positionY1, check);                        if (check == true) {                            positionY2 = positionY + 2;                            check = checkCells(list, positionX, positionY2, check);                            if (check == true) {                                list[positionX][positionY0] = 1;                                list[positionX][positionY1] = 1;                                list[positionX][positionY2] = 1;                                i++;                            }                        }                    }                }            } else {                int positionX0 = positionX;                int positionX1;                int positionX2;                if (positionX == 10 || positionX == 9) {                    check = checkCells(list, positionX, positionY, check);                    if (check == true) {                        positionX1 = positionX - 1;                        check = checkCells(list, positionX1, positionY, check);                        if (check == true) {                            positionX2 = positionX - 2;                            check = checkCells(list, positionX2, positionY, check);                            if (check == true) {                                list[positionX0][positionY] = 1;                                list[positionX1][positionY] = 1;                                list[positionX2][positionY] = 1;                                i++;                            }                        }                    }                } else {                    check = checkCells(list, positionX, positionY, check);                    if (check == true) {                        positionX1 = positionX + 1;                        check = checkCells(list, positionX1, positionY, check);                        if (check == true) {                            positionX2 = positionX + 2;                            check = checkCells(list, positionX2, positionY, check);                            if (check == true) {                                list[positionX0][positionY] = 1;                                list[positionX1][positionY] = 1;                                list[positionX2][positionY] = 1;                                i++;                            }                        }                    }                }            }        }    }    // Четырехпалубны    void shipsPositionFour(int[][] list) throws IOException {        for (int i = 0; i < 1; ) {            int positionX = 1 + (int) (Math.random() * (11 - 1));            int positionY = 1 + (int) (Math.random() * (11 - 1));            asix = asixSelection(asix);            if (asix == true) {                int positionY0 = positionY;                int positionY1;                int positionY2;                int positionY3;                if (positionY == 10 || positionY == 9 || positionY == 8) {                    check = checkCells(list, positionX, positionY, check);                    if (check == true) {                        positionY1 = positionY - 1;                        check = checkCells(list, positionX, positionY1, check);                        if (check == true) {                            positionY2 = positionY - 2;                            check = checkCells(list, positionX, positionY2, check);                            if (check == true) {                                positionY3 = positionY - 3;                                check = checkCells(list, positionX, positionY3, check);                                if (check == true) {                                    list[positionX][positionY0] = 1;                                    list[positionX][positionY1] = 1;                                    list[positionX][positionY2] = 1;                                    list[positionX][positionY3] = 1;                                    i++;                                }                            }                        }                    }                } else {                    check = checkCells(list, positionX, positionY, check);                    if (check == true) {                        positionY1 = positionY + 1;                        check = checkCells(list, positionX, positionY1, check);                        if (check == true) {                            positionY2 = positionY + 2;                            check = checkCells(list, positionX, positionY2, check);                            if (check == true) {                                positionY3 = positionY + 3;                                check = checkCells(list, positionX, positionY3, check);                                if (check == true) {                                    list[positionX][positionY0] = 1;                                    list[positionX][positionY1] = 1;                                    list[positionX][positionY2] = 1;                                    list[positionX][positionY3] = 1;                                    i++;                                }                            }                        }                    }                }            } else {                int positionX0 = positionX;                int positionX1;                int positionX2;                int positionX3;                if (positionX == 10 || positionX == 9 || positionX == 8) {                    check = checkCells(list, positionX, positionY, check);                    if (check == true) {                        positionX1 = positionX - 1;                        check = checkCells(list, positionX1, positionY, check);                        if (check == true) {                            positionX2 = positionX - 2;                            check = checkCells(list, positionX2, positionY, check);                            if (check == true) {                                positionX3 = positionX - 3;                                check = checkCells(list, positionX3, positionY, check);                                if (check == true) {                                    list[positionX0][positionY] = 1;                                    list[positionX1][positionY] = 1;                                    list[positionX2][positionY] = 1;                                    list[positionX3][positionY] = 1;                                    i++;                                }                            }                        }                    }                } else {                    check = checkCells(list, positionX, positionY, check);                    if (check == true) {                        positionX1 = positionX + 1;                        check = checkCells(list, positionX1, positionY, check);                        if (check == true) {                            positionX2 = positionX + 2;                            check = checkCells(list, positionX2, positionY, check);                            if (check == true) {                                positionX3 = positionX + 3;                                check = checkCells(list, positionX3, positionY, check);                                if (check == true) {                                    list[positionX0][positionY] = 1;                                    list[positionX1][positionY] = 1;                                    list[positionX2][positionY] = 1;                                    list[positionX3][positionY] = 1;                                    i++;                                }                            }                        }                    }                }            }        }    }    // Проверка ячеек на наличие других кораблей    boolean checkCells(int[][] list, int positionX, int positionY, boolean check) {        if (list[positionX][positionY] != 1) {            positionY = positionY + 1;            if (list[positionX][positionY] != 1) {                positionY = positionY - 2;                if (list[positionX][positionY] != 1) {                    positionX = positionX + 1;                    if (list[positionX][positionY] != 1) {                        positionY = positionY + 1;                        if (list[positionX][positionY] != 1) {                            positionY = positionY + 1;                            if (list[positionX][positionY] != 1) {                                positionX = positionX - 2;                                if (list[positionX][positionY] != 1) {                                    positionY = positionY - 1;                                    if (list[positionX][positionY] != 1) {                                        positionY = positionY - 1;                                        if (list[positionX][positionY] != 1) {                                            check = true;                                            return check;                                        }                                    }                                }                            }                        }                    }                }            }        }        check = false;        return check;    }    // Выбираем ось для расположения кораблей    boolean asixSelection(boolean asix) {        int random = (int) (Math.random() * 2);        if (random == 0) {            asix = true;            return asix;        } else {            asix = false;            return asix;        }    }}